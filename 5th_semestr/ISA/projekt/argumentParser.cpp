/** * ISA - Čtečka novinek ve formátu Atom a RSS s podporou TLS * @file Argument parser * @author Maxim Plička (xplick04) */#include "argumentParser.hpp"bool ArgumentParser::parseArgs(int argc, char **argv) {    int opt;    static struct option long_options[] =            {                    {0, no_argument,       0, 'h'},                    {0, no_argument,       0, 'T'},                    {0, no_argument,       0, 'a'},                    {0, no_argument,       0, 'u'},                    {0, required_argument, 0, 'f'},                    {0, required_argument, 0, 'c'},                    {0, required_argument, 0, 'C'},                    {0, 0, 0, 0}            };    while((opt = getopt_long(argc, argv, "Tauf:c:C:h", long_options, 0)) != -1)    {        switch (opt)        {            case 'T':                TFlag = true;                break;            case 'a':                aFlag = true;                break;            case 'u':                uFlag = true;                break;            case 'f':                feedfile = optarg;                break;            case 'c':                certfile = optarg;                break;            case 'C':                certaddr = optarg;                break;            case 'h':                std::cout << "Usage: ./feedreader <URL | -f <feedfile>> [-c <certfile>] [-C <certaddr>] [-T] [-a] [-u]" << std::endl;                exit(0);            default:    //unknown argument(help option appears)                std::cerr << "Wrong argument format" << std::endl;                std::cout << "Usage: ./feedreader <URL | -f <feedfile>> [-c <certfile>] [-C <certaddr>] [-T] [-a] [-u]" << std::endl;                return false;        }    }    if(optind + 1 == argc)  //URL address was specified    {        if(!feedfile.empty())   //feedfile was specified        {            std::cerr << "Cant specify url if -f argument is set" << std::endl;            return false;        }        url = argv[optind];    }    else if (feedfile.empty())  //URL address not set and feedfile was not set    {        std::cerr << "Url missing or too much Url arguments" << std::endl;        return false;    }    return true;}std::string ArgumentParser::getURL(){    return url;}std::string ArgumentParser::getfeedfile(){    return feedfile;}std::string ArgumentParser::getcertfile(){    return certfile;}std::string ArgumentParser::getcertaddr(){    return certaddr;}bool ArgumentParser::getTFlag(){    return TFlag;}bool ArgumentParser::getaFLag(){    return aFlag;}bool ArgumentParser::getuFlag(){    return uFlag;}